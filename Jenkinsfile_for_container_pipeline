
//START PIPELINE
pipeline {

  agent {label 'container'}

    environment {
        ARTIFACTORY_CRED = credentials('Artifactory_Hub')
    }
//Define needed parameters
  parameters{
     // USED FOR DEPLOYMENT TO CONTAINER STAGE  
      string(defaultValue: 'maven', description: 'Filter used as a label to remove old versions of images and containers.', name: 'filter')
      string(defaultValue: 'second_project_maven_image', description: 'Image name used for this build.', name: 'imageName')
      string(defaultValue: 'second_project_maven_container', description: 'Container name used for this build.', name: 'containerName')
      string(defaultValue: '9090', description: 'Exposed port used in this build.', name: 'EXPOSED_PORT')
      string(defaultValue: 'docker-virtual.artefact.local', description: 'Docker Registry on Artifactory.', name: 'docker_registry')                                           
 }
    
    options{
    timestamps()
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '2', numToKeepStr: '5'))
    }


stages {

  stage('Clean workspace') {
          steps{
              deleteDir()
              sh 'ls -lah'
          }
                        }
  stage("Git-Checkout")
        {
            steps 
                {
                // Get only Dockerfile from GitHub repository
               script{
                      sh 'git init'
                      sh 'git fetch "https://github.com/hluci93/Config_Files"'
                      sh 'git checkout FETCH_HEAD -- Dockerfile'
                     }
                }
        }
  stage("Pull Artifact")
        {
            steps 
                {
                // Get Artefact from Pipeline-maven-build-Package
                copyArtifacts filter: 'target/*.war', fingerprintArtifacts: true, projectName: 'Pipeline-maven-build-Package', selector: lastSuccessful(), target: './'

                }
        } 
 
  stage("Build Docker Image")
        {
            steps
               { 
                script
                  {                 
                    //Login to Registry and Build and Push Image
                        sh "echo \"${ARTIFACTORY_CRED_PSW}\" | docker login -u \"${ARTIFACTORY_CRED_USR}\" ${params.docker_registry} --password-stdin"
                        sh "docker build -t ${params.docker_registry}/${params.imageName}:${BUILD_NUMBER} ."
                        sh "docker push ${params.docker_registry}/${params.imageName}:${BUILD_NUMBER}"                      
                  }

                
                //Check and deploy container
                script
                  {
                      def nr_cont = sh (script: """ #!/bin/bash; docker ps -a --filter "label=type=${params.filter}" | wc -l """, returnStdout: true )
                      def old_container= sh (script: """ #!/bin/bash; docker ps -a | grep old | wc -l """, returnStdout: true)
                      cont= nr_cont
                      old=old_container
                     // Integer nr_cont_int = nr_cont as Integer
                      //Integer old_container_int = old_container as Integer
                      //sh "echo ${nr_cont} ${old_container} "
                      if ( cont != 1)
                        {
                        if ( old != 0)
                        {
                          sh "docker rm  ${params.containerName}_old"  
                        }
                        sh "docker stop ${params.containerName}"
                        sh "docker rename  ${params.containerName} ${params.containerName}_old"
                        }

                    sh """docker run -d -p ${params.EXPOSED_PORT}:8080 --name ${params.containerName} ${params.imageName}:${BUILD_NUMBER}"""                  
                }
        }
        }
stage("Cleanup")
        { 
          steps
            { //CLEANUP
                 echo 'Clean system of old images'
                 sh """docker image prune -f --filter label=type=${params.filter}"""
                }            
                
        }
 
}//Stages Closing

}//Pipeline closing

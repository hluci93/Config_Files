



//START PIPELINE
pipeline {

  agent {label 'container'}

//Define needed parameters
  parameters{
     // USED FOR DEPLOYMENT TO CONTAINER STAGE  
      string(defaultValue: 'maven', description: 'Filter used as a label to remove old versions of images and containers.', name: 'filter')
      string(defaultValue: 'second_project_maven_image', description: 'Image name used for this build.', name: 'imageName')
      string(defaultValue: 'second_project_maven_container', description: 'Container name used for this build.', name: 'containerName')
      string(defaultValue: '9090', description: 'Exposed port used in this build.', name: 'EXPOSED_PORT')
      string(defaultValue: 'docker-virtual.artefact.local', description: 'Docker Registry on Artifactory.', name: 'docker_registry')
      
                                             
 }
    
    options{
    timestamps()
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '2', numToKeepStr: '5'))
    }


stages {
  stage("Pull Artifact")
        {
            steps 
                {
                // Get Artifact from Build Pipeline Project
                copyArtifacts filter: '*.war', fingerprintArtifacts: true, projectName: 'Pipeline-maven-build-Package', selector: lastSuccessful(), target: '/target/'
                }
        } 
 
  stage("Build Docker Image")
        {
            steps
               { 
                //Build Image and Push Image to Registry  
                script
                  {                 
                        sh "docker login ${params.docker_registry}"
                        sh "docker build -t ${params.imageName}:${BUILD_NUMBER} ."
                        sh "docker tag ${params.imageName}:${BUILD_NUMBER} ${params.docker_registry}/${params.imageName}:${BUILD_NUMBER}"
                        sh "docker push ${params.docker_registry}/${params.imageName}:${BUILD_NUMBER}"                      
                  }
                //Deploy container
                sh """docker run -d -p ${params.EXPOSED_PORT}:8080 --name ${params.containerName} ${params.imageName}:${BUILD_NUMBER}"""               
                  
                }
        }
//  stage("Cleanup")
 //        { 
  //          steps
    //            { //CLEANUP
      //          echo 'Clean system of old images and containers'
        //        script
          //      {
            //      def nr_cont = sh """docker ps -a --filter "label=type=${params.filter}" | wc -l"""
              //    if ( nr_cont != 1){
                //      echo "test"
              //        sh """docker rm \$(docker stop \$(docker ps -a --filter "label=type=${params.filter}" --format="{{.ID}}"))"""
             //         }
             //    sh """docker image prune -f --filter label=type=${params.filter}"""
             //   }            
             //   
             //   }
        //  }  
}//Stages Closing

}//Pipeline closing
